<p style="color: green"><%= notice %></p>


<div class="container">
  <h1 class="task-title"><%= @task.title %></h1>
</div>
  <div class="book-container">
    <div class="book-page">
      <div class="task-content">
        <%= simple_format(@task.content, id: 'task-text', data: { progress: @task_progress.progress }) %>
      </div>
    </div>
  </div>

<div class="text-center">
  <%#= link_to "Edit this task", edit_task_path(@task) %> |
   <button id="finishReadingBtn"  class="btn btn-primary">Finish Reading</button>

  <%#= button_to "Destroy this task", @task, method: :delete %>
</div>

<!-- Modal -->
<div id="feedbackModal" class="modal" style="display: none;">
  <div class="modal-content">
    <span class="close">&times;</span>
    <%= form_with(model: [@task, @feedback], url: classroom_task_feedbacks_path(@task.classroom, @task)) do |f| %>
      <%= f.hidden_field :user_id, value: current_user.id %>
      <%= f.hidden_field :task_id, value: @task.id %>

      <div class="modal-content">
        <%= f.label :note, "Como você avalia o texto?" %>
        <%= f.select :note, options_for_select(["Abaixo do meu nível", "Adequado", "Acima do meu nível"]), class: "form-control" %>
          <%= f.label 'Comentario' %>
          <%= f.text_area :comment,size: "50x10" %><br>
      </div>

      <%= f.submit "Submit Feedback", class: "btn btn-success" %>
    <% end %>
  </div>
</div>

<script>
  let body = document.body,
      html = document.documentElement;

  let height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);

  const setProgress = () => {
    let scrollFromTop = (html.scrollTop || body.scrollTop) ;
    let width = (scrollFromTop / height) * 100
    var taskId = <%= @task.id %>; 
    var classroomId = <%= @task.classroom_id%>
    console.log('ele entra aqui??');

    width = Math.min(parseInt(width), 100);

    var url = '/classrooms/'+ classroomId + '/tasks/' + taskId + '/update_progress';
    var data = { progress: width };
    var csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
      
    fetch(url, {
       method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrfToken
      },
        body: JSON.stringify(data)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
      })
    console.log(width);
    console.log(taskId);

  }

  const setScrollOnLoad = () => {
    const progress = <%= @task_progress.progress || 0 %>;
    const body = document.body;
    const html = document.documentElement;
    const scrollHeight = Math.max(body.scrollHeight, html.scrollHeight);
    const clientHeight = Math.max(html.clientHeight, window.innerHeight);
    const scrollPosition = (progress / 100) * (scrollHeight - clientHeight);

    window.scrollTo(0, scrollPosition);
    if (!sessionStorage.getItem('reloaded')) {
      sessionStorage.setItem('reloaded', 'true');
      window.location.reload();
    } else {
      setScrollOnLoad(); // Ensure it's called on initial load
    }
  };


// Get the button that opens the modal
var btn = document.getElementById("finishReadingBtn");

// When the user clicks on the button, open the modal
btn.onclick = function() {
  var modal = document.getElementById("feedbackModal");
  modal.style.display = "block";
}

// Get the <span> element that closes the modal
var span = document.getElementsByClassName("close")[0];

// When the user clicks on <span> (x), close the modal
span.onclick = function() {
  var modal = document.getElementById("feedbackModal");
  modal.style.display = "none";
}

// When the user clicks anywhere outside of the modal, close it
window.onclick = function(event) {
  var modal = document.getElementById("feedbackModal");
  if (event.target == modal) {
    modal.style.display = "none";
  }
}

  window.addEventListener('scroll', setProgress);
  window.addEventListener('DOMContentLoaded', setScrollOnLoad);
  setScrollOnLoad();
</script>