<p style="color: green"><%= notice %></p>

<div class="container">
  <h1 class="task-title"><%= @task.title %></h1>
</div>

<div class="book-container">
  <div class="book-page">
    <div class="task-content">
      <%= simple_format(@content_chunks[@page], id: 'task-text', data: { progress: @task_progress.progress }) %>
    </div>
  </div>
</div>

<div class="text-center">
  <% if @page > 0 %>
    <%= link_to "Previous", classroom_task_path(@task.classroom, @task, page: @page - 1), id: 'prev-btn', class: "btn btn-secondary" %>
  <% end %>
  <% if @page < @content_chunks.size - 1 %>
    <%= link_to "Next", classroom_task_path(@task.classroom, @task, page: @page + 1), id: 'next-btn', class: "btn btn-primary" %>
  <% end %>
</div>

<!-- Modal -->
<div id="feedbackModal" class="modal" style="display: none;">
  <div class="modal-content">
    <span class="close">&times;</span>
    <%= form_with(model: [@task, @feedback], url: classroom_task_feedbacks_path(@task.classroom, @task)) do |f| %>
      <%= f.hidden_field :user_id, value: current_user.id %>
      <%= f.hidden_field :task_id, value: @task.id %>

      <div class="modal-content">
        <%= f.label :note, "Como você avalia o texto?" %>
        <%= f.select :note, options_for_select(["Abaixo do meu nível", "Adequado", "Acima do meu nível"]), class: "form-control" %>
        <%= f.label 'Comentario' %>
        <%= f.text_area :comment, size: "50x10" %><br>
      </div>

      <%= f.submit "Submit Feedback", class: "btn btn-success" %>
    <% end %>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const bodyElement = document.body;
    const htmlElement = document.documentElement;
    const height = Math.max(bodyElement.scrollHeight, bodyElement.offsetHeight, htmlElement.clientHeight, htmlElement.scrollHeight, htmlElement.offsetHeight);

    const updateProgressClick = (progress) => {
      const taskId = <%= @task.id %>;
      const classroomId = <%= @task.classroom_id %>;

      const url = `/classrooms/${classroomId}/tasks/${taskId}/update_progress`;
      const data = { progress: progress };
      const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

      fetch(url, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': csrfToken
        },
        body: JSON.stringify(data)
      }).then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
      });
    };

    const setScrollOnLoad = () => {
      const progress = <%= @task_progress.progress || 0 %>;
      const scrollHeight = Math.max(bodyElement.scrollHeight, htmlElement.scrollHeight);
      const clientHeight = Math.max(htmlElement.clientHeight, window.innerHeight);
      const scrollPosition = (progress / 100) * (scrollHeight - clientHeight);

      window.scrollTo(0, scrollPosition);
    };

    const nextBtn = document.getElementById('next-btn');
    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        const progress = ((<%= @page + 1 %> / <%= @content_chunks.size %>) * 100).toFixed(2);
        updateProgressClick(progress);
      });
    }

    const prevBtn = document.getElementById('prev-btn');
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        const progress = ((<%= @page - 1 %> / <%= @content_chunks.size %>) * 100).toFixed(2);
        updateProgressClick(progress);
      });
    }

    window.addEventListener('DOMContentLoaded', setScrollOnLoad);
    setScrollOnLoad();
  });
</script>
